//内核进程
import v2ray.core.ssr;
import v2ray.core.naive;
import wsock.tcp.server;
import process.popen;
import config;

namespace v2ray.core;

socksProxyPort = null;
httpProxPort = null;

getSystemProxyConfig = function(){
    if(!(socksProxyPort&&httpProxPort)){ return null; }
	return ..config.proxy.useHttpGlobal ? ("127.0.0.1:" + httpProxPort ): ("SOCKS=127.0.0.1:"+socksProxyPort)  
} 

isInboundPortChanged = function(){
	var inbounds = ..config.core.default.inbounds;
	if(! (..table.isArray(inbounds) && inbounds[1] && inbounds[2]) ){
		return true;
	}	
	
	return (inbounds[1].port!=socksProxyPort) || (inbounds[2].port!=httpProxPort)
}

var prcsV2Ray,v2RayStarting;
import process.job.limitKill;
restart = function(editor,outbound){
	
    if(!outbound){ return null,"错误的出站代理服务器配置"  }
    if(_WINXP){
    	return null,"抱歉！V2Ray Core 不支持 Windows XP, 仅支持 Windows 7, Windows 10 以及更新操作系统。";  
    }

	var inbounds = ..config.core.default[["inbounds"]];
	if(! (..table.isArray(inbounds) && inbounds[1] ) ){
		return null,"错误的入站SOCKS代理服务器配置" 
	}
	if(! ( inbounds[2] ) ){
		return null,"错误的入站HTTP代理服务器配置" 
	}

	if(v2RayStarting){ return null,"不能重复启动 V2Ray Core"  } 
	v2RayStarting = true;
	
	var corePath = getPath(editor.hwnd);
	if(!corePath){ 
		v2RayStarting = false;
		return false,"启动失败,未找到 v2ray.exe"; 
	}  
	
	// 先不要断开当前代理，使用当前代理下载会更快。
	if( outbound.protocol == "ssr" ){ 
		if(!..v2ray.core.ssr.getPath(editor.hwnd)){
			v2RayStarting = false;
			return false,"启动失败,未找到 SSR Core";
		}
	}
	if( outbound.protocol == "naive" ){ 
		if(!..v2ray.core.naive.getPath(editor.hwnd)){
			v2RayStarting = false;
			return false,"启动失败,未找到 NaïveProxy Core";
		}
	}
	
	..publish("activeOutbound",false);
	
	import sysProxy;
	..sysProxy.reset(false);
	

	socksProxyPort = inbounds[1].port;  
	httpProxPort = inbounds[2].port;
	if( (! socksProxyPort) || socksProxyPort >=  49152 ){ socksProxyPort = ..wsock.tcp.server.getFreePort("127.0.0.1",1081,10801,10811,44821)  }
	if( (! httpProxPort) || httpProxPort >=  49152 ){ httpProxPort = ..wsock.tcp.server.getFreePort("127.0.0.1",1082,10802,10812,44822) }
	
	if(prcsV2Ray){
		prcsV2Ray.terminate();
		prcsV2Ray = null;
	}
	
	..v2ray.core.ssr.stop();
	..v2ray.core.naive.stop();
	
	var nexCore;
	if( outbound.protocol == "ssr" ){  
		var nextProxyPort = ..wsock.getFreePort();
		if(!..v2ray.core.ssr.restart(editor,outbound,nextProxyPort)){
			v2RayStarting = false;
			return false,"SSR Core 启动失败";
		}

		outbound = {
			protocol = "socks";
			address = "127.0.0.1";
			port = nextProxyPort;
		} 
		
		nexCore = ..v2ray.core.ssr;
	}
	elseif( outbound.protocol == "naive" ){  
		var nextProxyPort = ..wsock.getFreePort();
		if(!..v2ray.core.naive.restart(editor,outbound,nextProxyPort)){
			v2RayStarting = false;
			return false,"SSR Core 启动失败";
		}

		outbound = {
			protocol = "socks";
			address = "127.0.0.1";
			port = nextProxyPort;
		} 
		
		nexCore = ..v2ray.core.naive;
	}

	if( ! prcsV2Ray ){ 
		
		import v2ray.core.configJson;
		var jsonPath,err = ..v2ray.core.configJson.write(
			..io.joinpath(..io.splitpath(corePath).dir,"config.json")
			,outbound,socksProxyPort,httpProxPort);
	
		if(!jsonPath){
			if( nexCore ){ nexCore.stop(); } 
			
			v2RayStarting = false;
			return false,err:"启动失败,写入配置文件遇到错误！"; 
		}
		
		var err;
		prcsV2Ray,err = ..process.popen(corePath,"-c=config.json" );
		if(!prcsV2Ray){
			if( nexCore ){ nexCore.stop(); }
	
			..publish("uiCommand.print",err:"启动 V2Ray Core 时遇到未知错误!");
			
			if(!..process().isWow64()){
				if(..process.isExe(corePath)!="PE32"){
					..io.remove(corePath);
					if(!..io.exist(corePath)){
						..publish("uiCommand.print","当前操作系统是32位，已删除无效的64位 V2Ray Core，正在下载32位 V2Ray Core");
						v2RayStarting = false;
						return restart(editor,outbound)	
					}
					else {
						..publish("uiCommand.print","当前操作系统是32位，但是找到的 V2Ray Core 是64位，请重新下载32位 V2Ray Core");
					} 
				} 	
			}
			
			v2RayStarting = false;
			return;
		}
		prcsV2Ray.assignToJobObject(process.job.limitKill);
		prcsV2Ray.codepage = 65001;	
		prcsV2Ray.logResponse(editor);  
		
		inbounds[1].port = socksProxyPort;
		inbounds[2].port = httpProxPort;
		..config.core.save();
	}
	
	..publish("uiCommand.print","已启动代理服务器，SOCKS端口:" + socksProxyPort + " HTTP端口:" + httpProxPort) 
	..publish("v2RayCore.restarted",socksProxyPort,httpProxPort); 
	v2RayStarting = false;
	return true;
}

stop = function(){
	..v2ray.core.ssr.stop();
	
	if(prcsV2Ray){
		prcsV2Ray.terminate();
		prcsV2Ray = null;
	}
	
	..sysProxy.reset(false);

	import v2ray.github;
   	v2ray.github.setProxy(false);
}

var getV2RayCoreUrl = function(){
	var msgDlg = ..win.dlg.message(..mainForm); 
	var form = msgDlg.create('正在获取 V2Ray Core 最新版本',,true)
	form.icon = '\uF1D8';
	form.progress.startProgress(50); 
	
	var url,tag = ..win.invoke(function(){
    	import process;
		import inet.http;
		var http = ..inet.http();
		var url = http.location("https://github.com/v2fly/v2ray-core/releases/latest");
		http.close();
		
		if(!url) return;
		
		var tag = ..string.match(url,"[^/]+$")
		if(!tag || (tag=="latest")) return;;
		
		return "https://github.com/v2fly/v2ray-core/releases/download/" 
			+ tag + "/v2ray-windows-" +	(..process().isWow64() ? "64" : "32") + ".zip",tag	
	});
	form.close();
    
	return url,tag;
} 

getPath = function(hwnd){
	var path = ..io.fullpath("/v2ray-core/v2ray.exe");
	if(..io.exist(path)){
		return path;
	}
		
	var path = ..io.appData("/winXray/core/v2ray.exe");
	if(..io.exist(path)){
		return path;
	}

	var path = ..io.fullpath("/xray-core/xray.exe");
	if(..io.exist(path)){
		..io.rename("/xray-core/","/v2ray-core/") 
	}

	var path = ..io.fullpath("/v2ray-core/xray.exe");
	if(..io.exist(path)){
		..io.rename("/v2ray-core/xray.exe","/v2ray-core/v2ray.exe")
		return ..io.fullpath("/v2ray-core/v2ray.exe");
	}
	
	if(self.lastDownloadingCoreFailed){
		return;
	}
	
	..mainForm.disabled = true; 
	var url,versionTag = getV2RayCoreUrl();
	 
	if(!url) {
		..publish("uiCommand.print","请下载 V2Rary Core 到以下路径:");
		..publish("uiCommand.print",path);
		
		..mainForm.disabled = false;
		self.lastDownloadingCoreFailed = true;
		return null;
	}
	
	import zlib.httpFile;
	if( ..zlib.httpFile.download(url,"正在下载 V2Ray Core"
		,..io.appData("/winXray/download/")
		,..io.appData("/winXray/core/"),,..mainForm.hwnd) ){
			
		self.lastDownloadingCoreFailed = null;
		..mainForm.disabled = false;
		return ..io.exist(path);
	}
	else {
		..mainForm.disabled = false;
		self.lastDownloadingCoreFailed = true;
		
		..publish("uiCommand.print","请到以下网址下载 V2Ray Core:");
		..publish("uiCommand.print",url);
		
		..publish("uiCommand.print","下载后请解压到以下目录内:");
		..publish("uiCommand.print",..io.appData("/winXray/core/"));
		
		//import process;
		//process.execute(..io._exepath,"/github","runas");
	}  
} 

getCoreDir = function(hwnd){
	var path = ..io.fullpath("/v2ray-core/v2ray.exe");
	if(..io.exist(path)){
		return ..io.fullpath("/v2ray-core/");
	}
		
	var path = ..io.appData("/winXray/core/v2ray.exe");
	if(..io.exist(path)){
		return ..io.appData("/winXray/core/");;
	}
	
	var path = ..io.fullpath("/v2ray-core/");
	if(..io.exist(path)){
		return path;
	}
	
	return ..io.appData("/winXray/core/");
} 

updateCore = function(){
    ..mainForm.disabled = true; 
    	
	var coreDir = getCoreDir();
	var url,versionTag = getV2RayCoreUrl();
	if(!url){		
		..mainForm.disabled = false;
		self.lastDownloadingCoreFailed = true;
		return null;
	}
	  
	import fsys;
	fsys.delete( ..io.appData("/winXray/temp/v2ray/") );
	 
	
	import zlib.httpFile;
	if( ..zlib.httpFile.download(url,"正在下载 V2Ray Core，版本：" + versionTag
		,..io.appData("/winXray/download/")
		,..io.appData("/winXray/temp/v2ray/"),,..mainForm.hwnd) ){
			..mainForm.disabled = false;
			
			if(..io.exist(..io.appData("/winXray/temp/v2ray/v2ray.exe"))){
				import sysProxy;
				sysProxy.reset(false);

				import process.file;
				process.file.terminate(..io.joinpath(coreDir,"v2ray.exe")); 
				process.file.terminate(..io.joinpath(coreDir,"v2ctl.exe")); 
				
				..io.createDir(coreDir); 
				fsys.copy(..io.appData("/winXray/temp/v2ray/v2ray.exe"),..io.joinpath(coreDir,"v2ray.exe")); 
				fsys.copy(..io.appData("/winXray/temp/v2ray/v2ctl.exe"),..io.joinpath(coreDir,"v2ctl.exe")); 
				
				self.lastDownloadingCoreFailed = null;
				return versionTag;
			} 
			else {
				self.lastDownloadingCoreFailed = true;
			} 
	}
	else {
		..mainForm.disabled = false;
		self.lastDownloadingCoreFailed = true; 
	} 	 
}

/**intellisense(v2ray.core)
socksProxyPort = SOCKS代理端口
httpProxPort = HTTP代理端口
isInboundPortChanged() = 是否已变更代理端口配置
restart(.(editor,outbound) = 重启启动 V2Ray 服务进程
lastDownloadingCoreFailed = 上次下载 Core 是否失败,如果希望重新下载请重新赋值为 null
end intellisense**/
