//configJson 内核配置
import config;
import web.json;
import inet.url;
import crypt;

namespace v2ray.core.configJson;
 
write  = function(jsonPath,outbound,sockPort,httpPort){
    if(!outbound){ return; }
	if(type(outbound.port)!=type.number){
		outbound.port = tonumber(outbound.port);
	}
	
	var current = ..table.clone(..config.core.default);
	var inbounds = current.inbounds;
	if(! (..table.isArray(inbounds) && inbounds[1] ) ){
		return null,"错误的入站SOCKS代理服务器配置" 
	}
	
	inbounds[1].pacPort = null; 
	inbounds[1].port = sockPort; 
	if(inbounds[2]){ inbounds[2].port = httpPort; }
	

	if(sockPort<0){
		..table.shift(inbounds); 
	}
	
	if(#outbound.tls && !outbound.sni){
		var host = outbound.host;
		if(..table.isArray(host)){ host = host[1] } 
		outbound.sni = host ? host : outbound.address
	}
	
	if(outbound.protocol=="vless"){ 
		if(!outbound.tls && outbound.port==443) outbound.tls = "tls";
		if(!outbound.tls) outbound.tls = "tls";
		
		var mux = (outbound.concurrency !== null) ? {
			concurrency=outbound.concurrency;
			enabled=outbound.concurrency ? ( outbound.concurrency > 0)
		} : {
			concurrency=8;
			enabled=true
		}; 
			
		var ob = {
			mux = outbound.tls != "xtls" ? mux : null;
			protocol="vless";
			
			settings={
				vnext={
					{
						address=outbound.address; 
						port=tonumber(outbound.port);
						users={
							{  
								id=outbound.id;
								flow=outbound.flow : (outbound.tls == "xtls" ? "xtls-rprx-direct" : null);
								encryption=( (!#outbound.security) || outbound.security=="auto") ? "none" : outbound.security;  
								level=outbound.level : 0;
							}
						}
					}
				};
			};
			streamSettings={
				network=outbound.network : "tcp";
				security=#outbound.tls ? outbound.tls : null;
				tlsSettings = (#outbound.tls && outbound.tls != "xtls") ? {
					allowInsecure = !!outbound.allowInsecure;
					serverName = outbound.sni : outbound.address;
					alpn = outbound.alpn;
					disableSessionResumption = outbound.disableSessionResumption;
				} : null;
				xtlsSettings = outbound.tls == "xtls" ? {
					allowInsecure = !!outbound.allowInsecure;
					serverName = outbound.sni : outbound.address;
					alpn = outbound.alpn;
					disableSessionResumption = outbound.disableSessionResumption;
				} : null;
			};
			tag="proxy"
		};
		
		if( outbound.network == "ws" ){
			ob.streamSettings.wsSettings = {
				path = outbound.path;
				headers = outbound.headers;
			}
			
			if( outbound.host ) {
				if(!ob.streamSettings.wsSettings.headers){
					ob.streamSettings.wsSettings.headers = {}
				}
				ob.streamSettings.wsSettings.headers.Host = outbound.host;
			}
		}
		elseif( (outbound.network == "http") || (outbound.network == "h2")  ){
			var host = outbound.host;
			if(type.isString(host)){host = {host}}; 
			
			ob.streamSettings.httpSettings = {
				path = outbound.path;
				host = host;
			}
		}
		elseif( outbound.network == "tcp" ){
			if( outbound.type == "http" ){
				ob.streamSettings.tcpSettings = {
					header = {
						request={
							headers=..table.assign({ 
								Connection={
									"keep-alive"
								};
								Host=outbound.host;
								Pragma="no-cache";
								["Accept-Encoding"]={
									"gzip, deflate"
								};
								["User-Agent"]={
									"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.75 Safari/537.36";
									"Mozilla/5.0 (iPhone; CPU iPhone OS 10_0_2 like Mac OS X) AppleWebKit/601.1 (KHTML, like Gecko) CriOS/53.0.2785.109 Mobile/14A456 Safari/601.1.46"
								}
							},outbound.headers);
							method = outbound.httpMethod : "GET";
							path = outbound.path;
							version="1.1"
						};
						type="http"; 
					} 
				} 
			}
		}
		elseif( outbound.network == "kcp" ){ 
			ob.streamSettings.kcpSettings = { 
				congestion = outbound.congestion;
				seed = outbound.seed;
				mtu = outbound.mtu;
				tti = outbound.tti;
				uplinkCapacity = outbound.uplinkCapacity;
				downlinkCapacity = outbound.downlinkCapacity;
				readBufferSize = outbound.readBufferSize;
				writeBufferSize = outbound.writeBufferSize;
				header = {
					type = outbound.type;
				}
			}
		}
		elseif( outbound.network == "quic" ){ 
			ob.streamSettings.kcpSettings = {
				key = outbound.key; 
				security = outbound.security ? outbound.security : "none";
				header = {
					type = outbound.type;
				}
			}
		}
		
		..table.assign(current.outbounds[1],ob); 
	}
	elseif(outbound.protocol=="vmess"){
		if(!#outbound.security) outbound.security = "auto";
		 
		var ob = {
			mux = (outbound.concurrency !== null) ? {
				concurrency=outbound.concurrency;
				enabled=outbound.concurrency ? ( outbound.concurrency > 0)
			} : {
				concurrency=8;
				enabled=true
			}; 
			protocol="vmess";
			settings={
				vnext={
					{
						address=outbound.address;
						level=outbound.level : null;
						port=tonumber(outbound.port);
						users={
							{
								alterId=tonumber(outbound.alterId) : 0;
								email=outbound.email : "t@t.tt";
								id=outbound.id;
								security=outbound.security;
							}
						}
					}
				};
			};
			streamSettings={
				network=outbound.network : "tcp";
				security=#outbound.tls ? outbound.tls : null;
				tlsSettings = #outbound.tls ? {
					allowInsecure = !!outbound.allowInsecure;
					serverName = outbound.sni;
				} : null
			};
			tag="proxy"
		};
		
		if( outbound.network == "ws" ){
			ob.streamSettings.wsSettings = {
				path = outbound.path;
				headers = outbound.headers;
			}
			
			if( outbound.host ) {
				if(!ob.streamSettings.wsSettings.headers){
					ob.streamSettings.wsSettings.headers = {}
				}
				ob.streamSettings.wsSettings.headers.Host = outbound.host;
			}
		}
		elseif( (outbound.network == "http") || (outbound.network == "h2")  ){
			var host = outbound.host;
			if(type.isString(host)){host = {host}}; 
			
			ob.streamSettings.httpSettings = {
				path = outbound.path;
				host = host;
			}
		}
		elseif( outbound.network == "tcp" ){
			if( outbound.type == "http" ){
				ob.streamSettings.tcpSettings = {
					header = {
						request={
							headers=..table.assign({ 
								Connection={
									"keep-alive"
								};
								Host=outbound.host;
								Pragma="no-cache";
								["Accept-Encoding"]={
									"gzip, deflate"
								};
								["User-Agent"]={
									"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.75 Safari/537.36";
									"Mozilla/5.0 (iPhone; CPU iPhone OS 10_0_2 like Mac OS X) AppleWebKit/601.1 (KHTML, like Gecko) CriOS/53.0.2785.109 Mobile/14A456 Safari/601.1.46"
								}
							},outbound.headers);
							method=outbound.httpMethod : "GET";
							path = outbound.path;
							version="1.1"
						};
						type="http"; 
					} 
				} 
			}
		}
		elseif( outbound.network == "kcp" ){ 
			ob.streamSettings.kcpSettings = { 
				congestion = outbound.congestion;
				seed = outbound.seed;
				mtu = outbound.mtu;
				tti = outbound.tti;
				uplinkCapacity = outbound.uplinkCapacity;
				downlinkCapacity = outbound.downlinkCapacity;
				readBufferSize = outbound.readBufferSize;
				writeBufferSize = outbound.writeBufferSize;
				header = {
					type = outbound.type;
				}
			}
		}
		elseif( outbound.network == "quic" ){ 
			ob.streamSettings.kcpSettings = {
				key = outbound.key; 
				security = outbound.security ? outbound.security : "none";
				header = {
					type = outbound.type;
				}
			}
		}
		
		..table.assign(current.outbounds[1],ob); 
	}
	elseif(outbound.protocol=="trojan" || outbound.protocol=="trojan-go"){
		outbound.tls = #outbound.tls ? outbound.tls : "tls";
		var ob = {
			mux = (outbound.concurrency !== null) ? {
				concurrency=outbound.concurrency;
				enabled=outbound.concurrency ? ( outbound.concurrency > 0)
			} : {
				concurrency=-1;
				enabled=false
			}; 
			protocol="trojan";
			settings={
				servers={
					{
						address=outbound.address;
						email=outbound.email;
						password=outbound.id;
						port=outbound.port; 
						level=outbound.level : 0; 
						encryption=outbound.security;  
						flow=outbound.flow : (outbound.tls == "xtls" ? "xtls-rprx-direct" : null);
					}
				};
			};
			streamSettings={
				network = outbound.network : "tcp";
				security = #outbound.tls ? outbound.tls : "tls";  
				
				tlsSettings =  (outbound.tls === "tls") ? {
					allowInsecure = !!outbound.allowInsecure;
					serverName = outbound.sni;
				} : null
			};
			tag="proxy"
		};
		
		if( outbound.network == "ws" ){
			ob.streamSettings.wsSettings = {
				path = outbound.path;
				headers = outbound.headers;
			}
			
			if( outbound.host ) {
				if(!ob.streamSettings.wsSettings.headers){
					ob.streamSettings.wsSettings.headers = {}
				}
				ob.streamSettings.wsSettings.headers.Host = outbound.host;
			}
		}
		..table.assign(current.outbounds[1],ob); 
	} 
	elseif(outbound.protocol=="shadowsocks"){
		var ob = {
			mux = (outbound.concurrency !== null) ? {
				concurrency=outbound.concurrency;
				enabled=outbound.concurrency ? ( outbound.concurrency > 0)
			} : {
				concurrency=-1;
				enabled=false
			}; 
			protocol="shadowsocks";
			settings={
				servers={
					{
						address=outbound.address;
						level=outbound.level : 0;
						method=outbound.security;
						ota=!!outbound.ota;
						password=outbound.id;
						port=outbound.port;
					}
				};
			};
			streamSettings={
				network = outbound.network : "tcp";
			};
			tag="proxy"
		};
		
		..table.assign(current.outbounds[1],ob); 
	} 
	elseif(outbound.protocol=="socks"){
		
		var ob = {
			mux = (outbound.concurrency !== null) ? {
				concurrency=outbound.concurrency;
				enabled=outbound.concurrency ? ( outbound.concurrency > 0)
			} : {
				concurrency=-1;
				enabled=false
			}; 
			protocol="socks";
			settings={
				servers={
					{
						address=outbound.address;
						port=outbound.port;
					}
				};
			};
			streamSettings={
				network = outbound.network : "tcp";
			};
			tag="proxy"
		};
		 
		if(#outbound.id){
			var user,password = ..string.match(outbound.id,"([^\:]+)\:(.+)");
			if(user && password){
				ob.settings.servers[1].users = {
					user = user;
					password = password;
					level = outbound.level : 0;
				}
			}
			else{
				ob.settings.servers[1].users = {
					user = outbound.id; 
					level = outbound.level : 0;
				}
			}
		}
		
		..table.assign(current.outbounds[1],ob); 
	} 
	elseif(outbound.protocol=="https" || outbound.protocol=="http"){
		
		var ob = { 
			protocol="http";
			settings={
				servers={
					{
						address=outbound.address;
						port=outbound.port;
					}
				};
			};
			streamSettings={
				security = outbound.protocol=="https"  ? "tls" : "none";  
				tlsSettings = (outbound.protocol=="https") ? {
					allowInsecure = !!outbound.allowInsecure;
				} : null;
			};
			tag="proxy"
		};
		 
		if(#outbound.id){
			var user,password = ..string.match(outbound.id,"([^\:]+)\:(.+)");
			if(user && password){
				ob.settings.servers[1].users = {
					user = user;
					password = password; 
				}
			}
			else{
				ob.settings.servers[1].users = {
					user = outbound.id;  
				}
			}
		}
		
		..table.assign(current.outbounds[1],ob); 
	} 

	..string.save(jsonPath,..web.json.stringify(current) );
	return jsonPath;
}

 